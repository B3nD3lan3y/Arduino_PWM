
Arduino_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  000005d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  20000430  00000a00  00020430  2**2
                  ALLOC
  3 .stack        00002004  2000044c  00000a1c  00020430  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY
  6 .debug_info   00006dd4  00000000  00000000  000204b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000055d  00000000  00000000  00027285  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000107  00000000  00000000  000277e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000a8  00000000  00000000  000278e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  00027991  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00011064  00000000  00000000  000279f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001bb0  00000000  00000000  00038a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006a184  00000000  00000000  0003a60d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000001fc  00000000  00000000  000a4794  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002450 	.word	0x20002450
   4:	00000119 	.word	0x00000119
   8:	00000115 	.word	0x00000115
   c:	00000115 	.word	0x00000115
	...
  2c:	00000115 	.word	0x00000115
	...
  38:	00000115 	.word	0x00000115
  3c:	00000115 	.word	0x00000115
  40:	00000115 	.word	0x00000115
  44:	00000115 	.word	0x00000115
  48:	00000115 	.word	0x00000115
  4c:	00000115 	.word	0x00000115
  50:	00000115 	.word	0x00000115
  54:	00000115 	.word	0x00000115
  58:	00000115 	.word	0x00000115
  5c:	00000115 	.word	0x00000115
  60:	00000115 	.word	0x00000115
  64:	00000115 	.word	0x00000115
  68:	00000115 	.word	0x00000115
  6c:	00000115 	.word	0x00000115
  70:	00000115 	.word	0x00000115
  74:	00000115 	.word	0x00000115
  78:	00000115 	.word	0x00000115
  7c:	00000115 	.word	0x00000115
  80:	00000115 	.word	0x00000115
  84:	00000115 	.word	0x00000115
  88:	00000115 	.word	0x00000115
  8c:	00000115 	.word	0x00000115
  90:	00000115 	.word	0x00000115
	...
  9c:	00000115 	.word	0x00000115
  a0:	00000115 	.word	0x00000115
  a4:	00000115 	.word	0x00000115
  a8:	00000115 	.word	0x00000115
  ac:	00000115 	.word	0x00000115
  b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000430 	.word	0x20000430
  d4:	00000000 	.word	0x00000000
  d8:	000005d0 	.word	0x000005d0

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000434 	.word	0x20000434
 108:	000005d0 	.word	0x000005d0
 10c:	000005d0 	.word	0x000005d0
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
 116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
 11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
 11e:	429a      	cmp	r2, r3
 120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
 124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
 126:	429a      	cmp	r2, r3
 128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
 12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
 12e:	429a      	cmp	r2, r3
 130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
 132:	e01e      	b.n	172 <Reset_Handler+0x5a>
 134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
 136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
 138:	3303      	adds	r3, #3
 13a:	1a9b      	subs	r3, r3, r2
 13c:	089b      	lsrs	r3, r3, #2
 13e:	3301      	adds	r3, #1
 140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
 146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
 148:	588c      	ldr	r4, [r1, r2]
 14a:	5084      	str	r4, [r0, r2]
 14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 14e:	429a      	cmp	r2, r3
 150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
 152:	e7ea      	b.n	12a <Reset_Handler+0x12>
 154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
 156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
 158:	3303      	adds	r3, #3
 15a:	1a9b      	subs	r3, r3, r2
 15c:	089b      	lsrs	r3, r3, #2
 15e:	3301      	adds	r3, #1
 160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 162:	2200      	movs	r2, #0
                *pDest++ = 0;
 164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
 166:	2100      	movs	r1, #0
 168:	1814      	adds	r4, r2, r0
 16a:	6021      	str	r1, [r4, #0]
 16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 16e:	429a      	cmp	r2, r3
 170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
 174:	21ff      	movs	r1, #255	; 0xff
 176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
 178:	438b      	bics	r3, r1
 17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 17c:	39fd      	subs	r1, #253	; 0xfd
 17e:	2390      	movs	r3, #144	; 0x90
 180:	005b      	lsls	r3, r3, #1
 182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
 184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
 188:	78c3      	ldrb	r3, [r0, #3]
 18a:	2403      	movs	r4, #3
 18c:	43a3      	bics	r3, r4
 18e:	2202      	movs	r2, #2
 190:	4313      	orrs	r3, r2
 192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 194:	78c3      	ldrb	r3, [r0, #3]
 196:	260c      	movs	r6, #12
 198:	43b3      	bics	r3, r6
 19a:	2108      	movs	r1, #8
 19c:	430b      	orrs	r3, r1
 19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
 1a2:	7b98      	ldrb	r0, [r3, #14]
 1a4:	2530      	movs	r5, #48	; 0x30
 1a6:	43a8      	bics	r0, r5
 1a8:	0005      	movs	r5, r0
 1aa:	2020      	movs	r0, #32
 1ac:	4328      	orrs	r0, r5
 1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1b0:	7b98      	ldrb	r0, [r3, #14]
 1b2:	43b0      	bics	r0, r6
 1b4:	4301      	orrs	r1, r0
 1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1b8:	7b99      	ldrb	r1, [r3, #14]
 1ba:	43a1      	bics	r1, r4
 1bc:	430a      	orrs	r2, r1
 1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
 1c2:	6851      	ldr	r1, [r2, #4]
 1c4:	2380      	movs	r3, #128	; 0x80
 1c6:	430b      	orrs	r3, r1
 1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
 1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
 1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
 1d0:	4798      	blx	r3
 1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
 1d4:	20000000 	.word	0x20000000
 1d8:	000005d0 	.word	0x000005d0
 1dc:	20000430 	.word	0x20000430
 1e0:	2000044c 	.word	0x2000044c
 1e4:	20000430 	.word	0x20000430
 1e8:	20000004 	.word	0x20000004
 1ec:	20000434 	.word	0x20000434
 1f0:	e000ed00 	.word	0xe000ed00
 1f4:	00000000 	.word	0x00000000
 1f8:	41007000 	.word	0x41007000
 1fc:	41005000 	.word	0x41005000
 200:	41004800 	.word	0x41004800
 204:	41004000 	.word	0x41004000
 208:	0000042d 	.word	0x0000042d
 20c:	000003b1 	.word	0x000003b1

00000210 <SystemInit>:
#define MAIN_OSC_FREQ (32768ul)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
 210:	4957      	ldr	r1, [pc, #348]	; (370 <SystemInit+0x160>)
 212:	684b      	ldr	r3, [r1, #4]
 214:	221e      	movs	r2, #30
 216:	4393      	bics	r3, r2
 218:	3a1c      	subs	r2, #28
 21a:	4313      	orrs	r3, r2
 21c:	604b      	str	r3, [r1, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
 21e:	4a55      	ldr	r2, [pc, #340]	; (374 <SystemInit+0x164>)
 220:	6991      	ldr	r1, [r2, #24]
 222:	2308      	movs	r3, #8
 224:	430b      	orrs	r3, r1
 226:	6193      	str	r3, [r2, #24]

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
 228:	4b53      	ldr	r3, [pc, #332]	; (378 <SystemInit+0x168>)
 22a:	4a54      	ldr	r2, [pc, #336]	; (37c <SystemInit+0x16c>)
 22c:	829a      	strh	r2, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
 22e:	8a99      	ldrh	r1, [r3, #20]
 230:	2202      	movs	r2, #2
 232:	430a      	orrs	r2, r1
 234:	829a      	strh	r2, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
 236:	0019      	movs	r1, r3
 238:	2202      	movs	r2, #2
 23a:	68cb      	ldr	r3, [r1, #12]
 23c:	421a      	tst	r2, r3
 23e:	d0fc      	beq.n	23a <SystemInit+0x2a>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
 240:	2201      	movs	r2, #1
 242:	4b4f      	ldr	r3, [pc, #316]	; (380 <SystemInit+0x170>)
 244:	701a      	strb	r2, [r3, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
 246:	001a      	movs	r2, r3
 248:	2101      	movs	r1, #1
 24a:	7813      	ldrb	r3, [r2, #0]
 24c:	420b      	tst	r3, r1
 24e:	d003      	beq.n	258 <SystemInit+0x48>
 250:	7853      	ldrb	r3, [r2, #1]
 252:	b25b      	sxtb	r3, r3
 254:	2b00      	cmp	r3, #0
 256:	dbf8      	blt.n	24a <SystemInit+0x3a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
 258:	2201      	movs	r2, #1
 25a:	4b49      	ldr	r3, [pc, #292]	; (380 <SystemInit+0x170>)
 25c:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
 25e:	001a      	movs	r2, r3
 260:	7853      	ldrb	r3, [r2, #1]
 262:	b25b      	sxtb	r3, r3
 264:	2b00      	cmp	r3, #0
 266:	dbfb      	blt.n	260 <SystemInit+0x50>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) | // Generic Clock Generator 1
 268:	4a46      	ldr	r2, [pc, #280]	; (384 <SystemInit+0x174>)
 26a:	4b45      	ldr	r3, [pc, #276]	; (380 <SystemInit+0x170>)
 26c:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
 26e:	001a      	movs	r2, r3
 270:	7853      	ldrb	r3, [r2, #1]
 272:	b25b      	sxtb	r3, r3
 274:	2b00      	cmp	r3, #0
 276:	dbfb      	blt.n	270 <SystemInit+0x60>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
 278:	2282      	movs	r2, #130	; 0x82
 27a:	01d2      	lsls	r2, r2, #7
 27c:	4b40      	ldr	r3, [pc, #256]	; (380 <SystemInit+0x170>)
 27e:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
 280:	001a      	movs	r2, r3
 282:	7853      	ldrb	r3, [r2, #1]
 284:	b25b      	sxtb	r3, r3
 286:	2b00      	cmp	r3, #0
 288:	dbfb      	blt.n	282 <SystemInit+0x72>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0 ;
 28a:	4a3b      	ldr	r2, [pc, #236]	; (378 <SystemInit+0x168>)
 28c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 28e:	2180      	movs	r1, #128	; 0x80
 290:	438b      	bics	r3, r1
 292:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
 294:	0011      	movs	r1, r2
 296:	2210      	movs	r2, #16
 298:	68cb      	ldr	r3, [r1, #12]
 29a:	421a      	tst	r2, r3
 29c:	d0fc      	beq.n	298 <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
 29e:	4a3a      	ldr	r2, [pc, #232]	; (388 <SystemInit+0x178>)
 2a0:	4b35      	ldr	r3, [pc, #212]	; (378 <SystemInit+0x168>)
 2a2:	62da      	str	r2, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (MASTER_CLOCK_FREQ/MAIN_OSC_FREQ) ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
 2a4:	0019      	movs	r1, r3
 2a6:	2210      	movs	r2, #16
 2a8:	68cb      	ldr	r3, [r1, #12]
 2aa:	421a      	tst	r2, r3
 2ac:	d0fc      	beq.n	2a8 <SystemInit+0x98>
  {
    /* Wait for synchronization */
  }

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
 2ae:	4a32      	ldr	r2, [pc, #200]	; (378 <SystemInit+0x168>)
 2b0:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 2b2:	4b36      	ldr	r3, [pc, #216]	; (38c <SystemInit+0x17c>)
 2b4:	430b      	orrs	r3, r1
 2b6:	8493      	strh	r3, [r2, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
 2b8:	0011      	movs	r1, r2
 2ba:	2210      	movs	r2, #16
 2bc:	68cb      	ldr	r3, [r1, #12]
 2be:	421a      	tst	r2, r3
 2c0:	d0fc      	beq.n	2bc <SystemInit+0xac>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
 2c2:	4a2d      	ldr	r2, [pc, #180]	; (378 <SystemInit+0x168>)
 2c4:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 2c6:	2302      	movs	r3, #2
 2c8:	430b      	orrs	r3, r1
 2ca:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
 2cc:	2180      	movs	r1, #128	; 0x80
 2ce:	2040      	movs	r0, #64	; 0x40
 2d0:	68d3      	ldr	r3, [r2, #12]
 2d2:	4219      	tst	r1, r3
 2d4:	d0fc      	beq.n	2d0 <SystemInit+0xc0>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
 2d6:	68d3      	ldr	r3, [r2, #12]
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
 2d8:	4218      	tst	r0, r3
 2da:	d0f9      	beq.n	2d0 <SystemInit+0xc0>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
  {
    /* Wait for locks flags */
  }

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
 2dc:	4926      	ldr	r1, [pc, #152]	; (378 <SystemInit+0x168>)
 2de:	2210      	movs	r2, #16
 2e0:	68cb      	ldr	r3, [r1, #12]
 2e2:	421a      	tst	r2, r3
 2e4:	d0fc      	beq.n	2e0 <SystemInit+0xd0>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
 2e6:	2200      	movs	r2, #0
 2e8:	4b25      	ldr	r3, [pc, #148]	; (380 <SystemInit+0x170>)
 2ea:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
 2ec:	001a      	movs	r2, r3
 2ee:	7853      	ldrb	r3, [r2, #1]
 2f0:	b25b      	sxtb	r3, r3
 2f2:	2b00      	cmp	r3, #0
 2f4:	dbfb      	blt.n	2ee <SystemInit+0xde>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
 2f6:	4a26      	ldr	r2, [pc, #152]	; (390 <SystemInit+0x180>)
 2f8:	4b21      	ldr	r3, [pc, #132]	; (380 <SystemInit+0x170>)
 2fa:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
 2fc:	001a      	movs	r2, r3
 2fe:	7853      	ldrb	r3, [r2, #1]
 300:	b25b      	sxtb	r3, r3
 302:	2b00      	cmp	r3, #0
 304:	dbfb      	blt.n	2fe <SystemInit+0xee>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_1_Val ;
 306:	4a1c      	ldr	r2, [pc, #112]	; (378 <SystemInit+0x168>)
 308:	6a11      	ldr	r1, [r2, #32]
 30a:	4b22      	ldr	r3, [pc, #136]	; (394 <SystemInit+0x184>)
 30c:	400b      	ands	r3, r1
 30e:	2180      	movs	r1, #128	; 0x80
 310:	0049      	lsls	r1, r1, #1
 312:	430b      	orrs	r3, r1
 314:	6213      	str	r3, [r2, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
 316:	6a13      	ldr	r3, [r2, #32]
 318:	3980      	subs	r1, #128	; 0x80
 31a:	438b      	bics	r3, r1
 31c:	6213      	str	r3, [r2, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
 31e:	4b18      	ldr	r3, [pc, #96]	; (380 <SystemInit+0x170>)
 320:	2203      	movs	r2, #3
 322:	609a      	str	r2, [r3, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
 324:	4a1c      	ldr	r2, [pc, #112]	; (398 <SystemInit+0x188>)
 326:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
 328:	001a      	movs	r2, r3
 32a:	7853      	ldrb	r3, [r2, #1]
 32c:	b25b      	sxtb	r3, r3
 32e:	2b00      	cmp	r3, #0
 330:	dbfb      	blt.n	32a <SystemInit+0x11a>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
 332:	4b10      	ldr	r3, [pc, #64]	; (374 <SystemInit+0x164>)
 334:	2200      	movs	r2, #0
 336:	721a      	strb	r2, [r3, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
 338:	725a      	strb	r2, [r3, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
 33a:	729a      	strb	r2, [r3, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
 33c:	72da      	strb	r2, [r3, #11]

  SystemCoreClock=MASTER_CLOCK_FREQ ;
 33e:	4a17      	ldr	r2, [pc, #92]	; (39c <SystemInit+0x18c>)
 340:	4b17      	ldr	r3, [pc, #92]	; (3a0 <SystemInit+0x190>)
 342:	601a      	str	r2, [r3, #0]
  /* ----------------------------------------------------------------------------------------------
   * 8) Load ADC factory calibration values
   */

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
 344:	4b17      	ldr	r3, [pc, #92]	; (3a4 <SystemInit+0x194>)
 346:	6819      	ldr	r1, [r3, #0]

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
 348:	4b17      	ldr	r3, [pc, #92]	; (3a8 <SystemInit+0x198>)
 34a:	681b      	ldr	r3, [r3, #0]
 34c:	0eda      	lsrs	r2, r3, #27

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
 34e:	068b      	lsls	r3, r1, #26
 350:	0f5b      	lsrs	r3, r3, #29
 352:	0218      	lsls	r0, r3, #8
 354:	0149      	lsls	r1, r1, #5
 356:	23ff      	movs	r3, #255	; 0xff
 358:	400b      	ands	r3, r1
 35a:	4313      	orrs	r3, r2
 35c:	4303      	orrs	r3, r0
 35e:	4a13      	ldr	r2, [pc, #76]	; (3ac <SystemInit+0x19c>)
 360:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
 362:	4a03      	ldr	r2, [pc, #12]	; (370 <SystemInit+0x160>)
 364:	6851      	ldr	r1, [r2, #4]
 366:	2380      	movs	r3, #128	; 0x80
 368:	430b      	orrs	r3, r1
 36a:	6053      	str	r3, [r2, #4]
}
 36c:	4770      	bx	lr
 36e:	46c0      	nop			; (mov r8, r8)
 370:	41004000 	.word	0x41004000
 374:	40000400 	.word	0x40000400
 378:	40000800 	.word	0x40000800
 37c:	0000060c 	.word	0x0000060c
 380:	40000c00 	.word	0x40000c00
 384:	00010501 	.word	0x00010501
 388:	7dff05b8 	.word	0x7dff05b8
 38c:	00000a04 	.word	0x00000a04
 390:	00030700 	.word	0x00030700
 394:	fffffcff 	.word	0xfffffcff
 398:	00010603 	.word	0x00010603
 39c:	02dc6c00 	.word	0x02dc6c00
 3a0:	20000000 	.word	0x20000000
 3a4:	00806024 	.word	0x00806024
 3a8:	00806020 	.word	0x00806020
 3ac:	42004000 	.word	0x42004000

000003b0 <main>:
//
//-----------------------------------------------------------------------------

//=============================================================================
int main(void)
{
 3b0:	b510      	push	{r4, lr}
    /* Initialize the SAM system */
    SystemInit();
 3b2:	4b02      	ldr	r3, [pc, #8]	; (3bc <main+0xc>)
 3b4:	4798      	blx	r3
    pwm_init();
 3b6:	4b02      	ldr	r3, [pc, #8]	; (3c0 <main+0x10>)
 3b8:	4798      	blx	r3
 3ba:	e7fe      	b.n	3ba <main+0xa>
 3bc:	00000211 	.word	0x00000211
 3c0:	000003c5 	.word	0x000003c5

000003c4 <pwm_init>:
//
//------------------------------------------------------------------------------

//==============================================================================
void pwm_init()
{
 3c4:	b510      	push	{r4, lr}
  // Enable Multiplexing
  PORT->Group[LED_R0_GROUP].PINCFG[LED_R0_PIN].bit.PMUXEN = 1;
 3c6:	4b16      	ldr	r3, [pc, #88]	; (420 <pwm_init+0x5c>)
 3c8:	204f      	movs	r0, #79	; 0x4f
 3ca:	5c19      	ldrb	r1, [r3, r0]
 3cc:	2201      	movs	r2, #1
 3ce:	4311      	orrs	r1, r2
 3d0:	5419      	strb	r1, [r3, r0]
  PORT->Group[LED_G0_GROUP].PINCFG[LED_G0_PIN].bit.PMUXEN = 1;
 3d2:	3005      	adds	r0, #5
 3d4:	5c19      	ldrb	r1, [r3, r0]
 3d6:	4311      	orrs	r1, r2
 3d8:	5419      	strb	r1, [r3, r0]
  PORT->Group[LED_B0_GROUP].PINCFG[LED_B0_PIN].bit.PMUXEN = 1;
 3da:	2147      	movs	r1, #71	; 0x47
 3dc:	5c58      	ldrb	r0, [r3, r1]
 3de:	4302      	orrs	r2, r0
 3e0:	545a      	strb	r2, [r3, r1]
  
  // Configure Multiplexing
  // R0 and G0 use Peripherial Function F (TCC0)
  // B0 uses Peripherial Function E 
  PORT->Group[LED_R0_GROUP].PMUX[LED_R0].bit.PMUXO = 0x5;
 3e2:	4c10      	ldr	r4, [pc, #64]	; (424 <pwm_init+0x60>)
 3e4:	5d1a      	ldrb	r2, [r3, r4]
 3e6:	200f      	movs	r0, #15
 3e8:	4002      	ands	r2, r0
 3ea:	2150      	movs	r1, #80	; 0x50
 3ec:	430a      	orrs	r2, r1
 3ee:	551a      	strb	r2, [r3, r4]
  PORT->Group[LED_G0_GROUP].PMUX[LED_G0].bit.PMUXO = 0x5;
 3f0:	4c0d      	ldr	r4, [pc, #52]	; (428 <pwm_init+0x64>)
 3f2:	5d1a      	ldrb	r2, [r3, r4]
 3f4:	4002      	ands	r2, r0
 3f6:	4311      	orrs	r1, r2
 3f8:	5519      	strb	r1, [r3, r4]
  PORT->Group[LED_B0_GROUP].PMUX[LED_B0].bit.PMUXO = 0x4;
 3fa:	24b0      	movs	r4, #176	; 0xb0
 3fc:	5d1a      	ldrb	r2, [r3, r4]
 3fe:	4002      	ands	r2, r0
 400:	2140      	movs	r1, #64	; 0x40
 402:	430a      	orrs	r2, r1
 404:	551a      	strb	r2, [r3, r4]
  
  
  
  PORT->Group[LED_R0_GROUP].DIRSET.reg = LED_R0;
 406:	2080      	movs	r0, #128	; 0x80
 408:	0200      	lsls	r0, r0, #8
 40a:	6098      	str	r0, [r3, #8]
  PORT->Group[LED_G0_GROUP].DIRSET.reg = LED_G0;
 40c:	2180      	movs	r1, #128	; 0x80
 40e:	0349      	lsls	r1, r1, #13
 410:	6099      	str	r1, [r3, #8]
  PORT->Group[LED_B0_GROUP].DIRSET.reg = LED_B0;
 412:	2280      	movs	r2, #128	; 0x80
 414:	609a      	str	r2, [r3, #8]
  
  PORT->Group[LED_R0_GROUP].OUTCLR.reg = LED_R0;
 416:	6158      	str	r0, [r3, #20]
  PORT->Group[LED_G0_GROUP].OUTSET.reg = LED_G0;
 418:	6199      	str	r1, [r3, #24]
  PORT->Group[LED_B0_GROUP].OUTSET.reg = LED_B0;
 41a:	619a      	str	r2, [r3, #24]
  //   Optionally invert the waveform output WO[x] by writing the corresponding Waveform Output Invert Enable bit in the Driver Control register (DRVCTRL.INVENx)
  //   Configure the PORT module to enable the peripheral function on the pin

  // Page 660:
  // For single-slope PWM generation, the period time is controlled by PER, while CCx control the duty cycle of the generated waveform output. When up-counting, WO[x] is set at start or compare match between the COUNT and TOP values, and cleared on compare match between COUNT and CCx register values.
}
 41c:	bd10      	pop	{r4, pc}
 41e:	46c0      	nop			; (mov r8, r8)
 420:	41004400 	.word	0x41004400
 424:	00008030 	.word	0x00008030
 428:	00100030 	.word	0x00100030

0000042c <__libc_init_array>:
 42c:	b570      	push	{r4, r5, r6, lr}
 42e:	4e0d      	ldr	r6, [pc, #52]	; (464 <__libc_init_array+0x38>)
 430:	4d0d      	ldr	r5, [pc, #52]	; (468 <__libc_init_array+0x3c>)
 432:	2400      	movs	r4, #0
 434:	1bad      	subs	r5, r5, r6
 436:	10ad      	asrs	r5, r5, #2
 438:	d005      	beq.n	446 <__libc_init_array+0x1a>
 43a:	00a3      	lsls	r3, r4, #2
 43c:	58f3      	ldr	r3, [r6, r3]
 43e:	3401      	adds	r4, #1
 440:	4798      	blx	r3
 442:	42a5      	cmp	r5, r4
 444:	d1f9      	bne.n	43a <__libc_init_array+0xe>
 446:	f000 f8b1 	bl	5ac <_init>
 44a:	4e08      	ldr	r6, [pc, #32]	; (46c <__libc_init_array+0x40>)
 44c:	4d08      	ldr	r5, [pc, #32]	; (470 <__libc_init_array+0x44>)
 44e:	2400      	movs	r4, #0
 450:	1bad      	subs	r5, r5, r6
 452:	10ad      	asrs	r5, r5, #2
 454:	d005      	beq.n	462 <__libc_init_array+0x36>
 456:	00a3      	lsls	r3, r4, #2
 458:	58f3      	ldr	r3, [r6, r3]
 45a:	3401      	adds	r4, #1
 45c:	4798      	blx	r3
 45e:	42a5      	cmp	r5, r4
 460:	d1f9      	bne.n	456 <__libc_init_array+0x2a>
 462:	bd70      	pop	{r4, r5, r6, pc}
 464:	000005b8 	.word	0x000005b8
 468:	000005b8 	.word	0x000005b8
 46c:	000005b8 	.word	0x000005b8
 470:	000005c0 	.word	0x000005c0

00000474 <register_fini>:
 474:	4b03      	ldr	r3, [pc, #12]	; (484 <register_fini+0x10>)
 476:	b510      	push	{r4, lr}
 478:	2b00      	cmp	r3, #0
 47a:	d002      	beq.n	482 <register_fini+0xe>
 47c:	4802      	ldr	r0, [pc, #8]	; (488 <register_fini+0x14>)
 47e:	f000 f805 	bl	48c <atexit>
 482:	bd10      	pop	{r4, pc}
 484:	00000000 	.word	0x00000000
 488:	0000049d 	.word	0x0000049d

0000048c <atexit>:
 48c:	b510      	push	{r4, lr}
 48e:	0001      	movs	r1, r0
 490:	2300      	movs	r3, #0
 492:	2200      	movs	r2, #0
 494:	2000      	movs	r0, #0
 496:	f000 f81b 	bl	4d0 <__register_exitproc>
 49a:	bd10      	pop	{r4, pc}

0000049c <__libc_fini_array>:
 49c:	b570      	push	{r4, r5, r6, lr}
 49e:	4b09      	ldr	r3, [pc, #36]	; (4c4 <__libc_fini_array+0x28>)
 4a0:	4c09      	ldr	r4, [pc, #36]	; (4c8 <__libc_fini_array+0x2c>)
 4a2:	1ae4      	subs	r4, r4, r3
 4a4:	10a4      	asrs	r4, r4, #2
 4a6:	d009      	beq.n	4bc <__libc_fini_array+0x20>
 4a8:	4a08      	ldr	r2, [pc, #32]	; (4cc <__libc_fini_array+0x30>)
 4aa:	18a5      	adds	r5, r4, r2
 4ac:	00ad      	lsls	r5, r5, #2
 4ae:	18ed      	adds	r5, r5, r3
 4b0:	682b      	ldr	r3, [r5, #0]
 4b2:	3c01      	subs	r4, #1
 4b4:	4798      	blx	r3
 4b6:	3d04      	subs	r5, #4
 4b8:	2c00      	cmp	r4, #0
 4ba:	d1f9      	bne.n	4b0 <__libc_fini_array+0x14>
 4bc:	f000 f880 	bl	5c0 <_fini>
 4c0:	bd70      	pop	{r4, r5, r6, pc}
 4c2:	46c0      	nop			; (mov r8, r8)
 4c4:	000005cc 	.word	0x000005cc
 4c8:	000005d0 	.word	0x000005d0
 4cc:	3fffffff 	.word	0x3fffffff

000004d0 <__register_exitproc>:
 4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4d2:	4644      	mov	r4, r8
 4d4:	465f      	mov	r7, fp
 4d6:	4656      	mov	r6, sl
 4d8:	464d      	mov	r5, r9
 4da:	469b      	mov	fp, r3
 4dc:	4b2f      	ldr	r3, [pc, #188]	; (59c <__register_exitproc+0xcc>)
 4de:	b4f0      	push	{r4, r5, r6, r7}
 4e0:	681c      	ldr	r4, [r3, #0]
 4e2:	23a4      	movs	r3, #164	; 0xa4
 4e4:	005b      	lsls	r3, r3, #1
 4e6:	0005      	movs	r5, r0
 4e8:	58e0      	ldr	r0, [r4, r3]
 4ea:	000e      	movs	r6, r1
 4ec:	4690      	mov	r8, r2
 4ee:	2800      	cmp	r0, #0
 4f0:	d04b      	beq.n	58a <__register_exitproc+0xba>
 4f2:	6843      	ldr	r3, [r0, #4]
 4f4:	2b1f      	cmp	r3, #31
 4f6:	dc0d      	bgt.n	514 <__register_exitproc+0x44>
 4f8:	1c5c      	adds	r4, r3, #1
 4fa:	2d00      	cmp	r5, #0
 4fc:	d121      	bne.n	542 <__register_exitproc+0x72>
 4fe:	3302      	adds	r3, #2
 500:	009b      	lsls	r3, r3, #2
 502:	6044      	str	r4, [r0, #4]
 504:	501e      	str	r6, [r3, r0]
 506:	2000      	movs	r0, #0
 508:	bc3c      	pop	{r2, r3, r4, r5}
 50a:	4690      	mov	r8, r2
 50c:	4699      	mov	r9, r3
 50e:	46a2      	mov	sl, r4
 510:	46ab      	mov	fp, r5
 512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 514:	4b22      	ldr	r3, [pc, #136]	; (5a0 <__register_exitproc+0xd0>)
 516:	2b00      	cmp	r3, #0
 518:	d03c      	beq.n	594 <__register_exitproc+0xc4>
 51a:	20c8      	movs	r0, #200	; 0xc8
 51c:	0040      	lsls	r0, r0, #1
 51e:	e000      	b.n	522 <__register_exitproc+0x52>
 520:	bf00      	nop
 522:	2800      	cmp	r0, #0
 524:	d036      	beq.n	594 <__register_exitproc+0xc4>
 526:	22a4      	movs	r2, #164	; 0xa4
 528:	2300      	movs	r3, #0
 52a:	0052      	lsls	r2, r2, #1
 52c:	58a1      	ldr	r1, [r4, r2]
 52e:	6043      	str	r3, [r0, #4]
 530:	6001      	str	r1, [r0, #0]
 532:	50a0      	str	r0, [r4, r2]
 534:	3240      	adds	r2, #64	; 0x40
 536:	5083      	str	r3, [r0, r2]
 538:	3204      	adds	r2, #4
 53a:	5083      	str	r3, [r0, r2]
 53c:	2401      	movs	r4, #1
 53e:	2d00      	cmp	r5, #0
 540:	d0dd      	beq.n	4fe <__register_exitproc+0x2e>
 542:	009a      	lsls	r2, r3, #2
 544:	4691      	mov	r9, r2
 546:	4481      	add	r9, r0
 548:	4642      	mov	r2, r8
 54a:	2188      	movs	r1, #136	; 0x88
 54c:	464f      	mov	r7, r9
 54e:	507a      	str	r2, [r7, r1]
 550:	22c4      	movs	r2, #196	; 0xc4
 552:	0052      	lsls	r2, r2, #1
 554:	4690      	mov	r8, r2
 556:	4480      	add	r8, r0
 558:	4642      	mov	r2, r8
 55a:	3987      	subs	r1, #135	; 0x87
 55c:	4099      	lsls	r1, r3
 55e:	6812      	ldr	r2, [r2, #0]
 560:	468a      	mov	sl, r1
 562:	430a      	orrs	r2, r1
 564:	4694      	mov	ip, r2
 566:	4642      	mov	r2, r8
 568:	4661      	mov	r1, ip
 56a:	6011      	str	r1, [r2, #0]
 56c:	2284      	movs	r2, #132	; 0x84
 56e:	4649      	mov	r1, r9
 570:	465f      	mov	r7, fp
 572:	0052      	lsls	r2, r2, #1
 574:	508f      	str	r7, [r1, r2]
 576:	2d02      	cmp	r5, #2
 578:	d1c1      	bne.n	4fe <__register_exitproc+0x2e>
 57a:	0002      	movs	r2, r0
 57c:	4655      	mov	r5, sl
 57e:	328d      	adds	r2, #141	; 0x8d
 580:	32ff      	adds	r2, #255	; 0xff
 582:	6811      	ldr	r1, [r2, #0]
 584:	430d      	orrs	r5, r1
 586:	6015      	str	r5, [r2, #0]
 588:	e7b9      	b.n	4fe <__register_exitproc+0x2e>
 58a:	0020      	movs	r0, r4
 58c:	304d      	adds	r0, #77	; 0x4d
 58e:	30ff      	adds	r0, #255	; 0xff
 590:	50e0      	str	r0, [r4, r3]
 592:	e7ae      	b.n	4f2 <__register_exitproc+0x22>
 594:	2001      	movs	r0, #1
 596:	4240      	negs	r0, r0
 598:	e7b6      	b.n	508 <__register_exitproc+0x38>
 59a:	46c0      	nop			; (mov r8, r8)
 59c:	000005a8 	.word	0x000005a8
 5a0:	00000000 	.word	0x00000000
 5a4:	00000043 	.word	0x00000043

000005a8 <_global_impure_ptr>:
 5a8:	20000008                                ... 

000005ac <_init>:
 5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5ae:	46c0      	nop			; (mov r8, r8)
 5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5b2:	bc08      	pop	{r3}
 5b4:	469e      	mov	lr, r3
 5b6:	4770      	bx	lr

000005b8 <__init_array_start>:
 5b8:	00000475 	.word	0x00000475

000005bc <__frame_dummy_init_array_entry>:
 5bc:	000000dd                                ....

000005c0 <_fini>:
 5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5c2:	46c0      	nop			; (mov r8, r8)
 5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5c6:	bc08      	pop	{r3}
 5c8:	469e      	mov	lr, r3
 5ca:	4770      	bx	lr

000005cc <__fini_array_start>:
 5cc:	000000b5 	.word	0x000000b5
