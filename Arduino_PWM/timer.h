//------------------------------------------------------------------------------
//             __             __   ___  __
//     | |\ | /  ` |    |  | |  \ |__  /__`
//     | | \| \__, |___ \__/ |__/ |___ .__/
//
//------------------------------------------------------------------------------

#include "timer.h"
#include <sam.h>
#include <stdint.h>

//------------------------------------------------------------------------------
//      __   ___  ___         ___  __
//     |  \ |__  |__  | |\ | |__  /__`
//     |__/ |___ |    | | \| |___ .__/
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//     ___      __   ___  __   ___  ___  __
//      |  \ / |__) |__  |  \ |__  |__  /__`
//      |   |  |    |___ |__/ |___ |    .__/
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//                __          __        ___  __
//     \  /  /\  |__) |  /\  |__) |    |__  /__`
//      \/  /~~\ |  \ | /~~\ |__) |___ |___ .__/
//
//------------------------------------------------------------------------------
static volatile uint64_t millis = 0;	// number of milliseconds

//------------------------------------------------------------------------------
//      __   __   __  ___  __  ___      __   ___  __
//     |__) |__) /  \  |  /  \  |  \ / |__) |__  /__`
//     |    |  \ \__/  |  \__/  |   |  |    |___ .__/
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//      __        __          __
//     |__) |  | |__) |    | /  `
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
//	TCC0 Setup
//	Clock speed: 750,000 MHz
//	Mode: Match Frequency Generation
//	Interrupt flag used: overflow
//==============================================================================
void timer_init(void)
{
	// Make sure TCC0 is disabled before setup
	TCC0 -> CTRLA.reg &= ~(TCC_CTRLA_ENABLE);
	
	// Enable TC  bus clock (CLK_TCx_APB) and scale the clock
	GCLK -> CLKCTRL.reg = GCLK_CLKCTRL_ID(GCLK_CLKCTRL_ID_TCC0_TCC1) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_CLKEN;
	PM -> APBCMASK.reg |= PM_APBCMASK_TCC0;
	TCC0 -> WAVE.reg |= TCC_WAVE_WAVEGEN_MFRQ;
	TCC0 -> CTRLA.reg |= TCC_CTRLA_PRESCALER_DIV64;
	
	// A little more thorough
	NVIC_DisableIRQ(TCC0_IRQn);
	NVIC_ClearPendingIRQ(TCC0_IRQn);
	NVIC_SetPriority(TCC0_IRQn, 0);
	NVIC_EnableIRQ(TCC0_IRQn);
	
	// Enable compare interrupt
	TCC0 -> INTENSET.reg |= TCC_INTENSET_OVF;
	TCC0 -> CC[0].reg = 0x2ED;
	TCC0 -> CTRLA.reg |= TCC_CTRLA_ENABLE;
}

//==============================================================================
//	Set timer to certain number of milliseconds
//==============================================================================
void timer_set(uint64_t ms_value)
{
	millis = ms_value;
}

//==============================================================================
//	Get the current value of timer
//==============================================================================
uint64_t timer_get()
{
	return millis;
}

//------------------------------------------------------------------------------
//      __   __              ___  ___
//     |__) |__) | \  /  /\   |  |__
//     |    |  \ |  \/  /~~\  |  |___
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//      __                  __        __        __
//     /  `  /\  |    |    |__)  /\  /  ` |__/ /__`
//     \__, /~~\ |___ |___ |__) /~~\ \__, |  \ .__/
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//        __   __  , __
//     | /__` |__)  /__`
//     | .__/ |  \  .__/
//
//------------------------------------------------------------------------------
void TCC0_Handler()
{
	millis++;
	TCC0 -> INTFLAG.reg |= TCC_INTFLAG_OVF;
}